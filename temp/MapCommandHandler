
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.map.MapView;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.List;

public class MapCommandHandler implements CommandExecutor {

    private final JavaPlugin plugin;
    private final List<Location> chestLocations;

    public MapCommandHandler(JavaPlugin plugin, List<Location> chestLocations) {
        this.plugin = plugin;
        this.chestLocations = chestLocations;
        plugin.getCommand("th").setExecutor(this);
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!(sender instanceof Player)) {
            sender.sendMessage("Only players can use this command.");
            return true;
        }

        Player player = (Player) sender;
        ItemStack itemInHand = player.getInventory().getItemInMainHand();

        if (args.length > 0 && args[0].equalsIgnoreCase("map")) {
            if (itemInHand.getType() == Material.FILLED_MAP) {
                Location playerLocation = player.getLocation();
                Location closestChest = getClosestChestLocation(playerLocation);

                if (closestChest != null) {
                    MapView mapView = Bukkit.createMap(player.getWorld());
                    mapView.getRenderers().clear();
                    mapView.addRenderer(new ChestMapRenderer(closestChest));
                    itemInHand.setDurability(mapView.getId());

                    player.sendMessage("Map updated with the closest chest location.");
                } else {
                    player.sendMessage("No chests found.");
                }
            } else {
                player.sendMessage("You must hold a map in your hand to use this command.");
            }
            return true;
        }

        return false;
    }

    private Location getClosestChestLocation(Location playerLocation) {
        Location closest = null;
        double closestDistance = Double.MAX_VALUE;

        for (Location chestLocation : chestLocations) {
            double distance = chestLocation.distance(playerLocation);
            if (distance < closestDistance) {
                closestDistance = distance;
                closest = chestLocation;
            }
        }

        return closest;
    }
}